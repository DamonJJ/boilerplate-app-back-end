{"version":3,"sources":["components/Note.js","components/Notification.js","components/LoginForm.js","components/NoteForm.js","components/Togglable.js","components/Footer.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","NoteForm","createNote","useState","newNote","setNewNote","event","preventDefault","Math","random","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","Footer","color","fontStyle","fontSize","baseUrl","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","noteObject","noteFormRef","current","returnedNote","concat","notesToShow","filter","handleLogin","loginService","setItem","stringify","setTimeout","useRef","name","map","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94b995b1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React, { Component } from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password,\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input value={username} onChange={handleUsernameChange} />\n        </div>\n        <div>\n          password\n          <input\n            type='password'\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n  );\n};\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm;\n","import React, { useState } from 'react';\n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('');\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    createNote({\n      content: newNote,\n      important: Math.random() > 0.5,\n    });\n\n    setNewNote('');\n  };\n\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleChange} />\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default NoteForm;\n","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${ baseUrl } /${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect, useRef } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NoteForm from './components/NoteForm';\nimport Togglable from './components/Togglable';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\nimport loginService from './services/login';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [loginVisible, setLoginVisible] = useState(false);\n\n  const [username, setUsername] = useState('mluukkai');\n  const [password, setPassword] = useState('mluukkai');\n\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      noteService.setToken(user.token);\n    }\n  }, []);\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const handleLogin = async (event) => {\n    event.preventDefault();\n    try {\n      const user = await loginService.login({\n        username,\n        password,\n      });\n\n      noteService.setToken(user.token);\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));\n\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (exception) {\n      setErrorMessage('wrong credentials');\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    }\n  };\n\n  const loginForm = () => (\n    <Togglable buttonLabel='log in'>\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}\n      />\n    </Togglable>\n  );\n\n  const noteFormRef = useRef();\n\n  const noteForm = () => (\n    <Togglable buttonLabel='new note' ref={noteFormRef}>\n      <NoteForm createNote={addNote} />\n    </Togglable>\n  );\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      {user === null ? (\n        loginForm()\n      ) : (\n        <div>\n          <p>{user.name} logged in</p>\n          {noteForm()}\n        </div>\n      )}\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}